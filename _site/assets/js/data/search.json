[ { "title": "(Vue.js) Vuex 상태관리자 시작하기 (1)", "url": "/posts/vuejs-vuex-startup-1/", "categories": "Vue.js", "tags": "vue.js, Vuex", "date": "2020-09-14 11:00:00 +0900", "snippet": "✨Vue 어플리케이션의 공통 반응형 데이터를 처리를 위한 상태관리자 Vuex 에 대해 알아보도록 하겠습니다. Coming Soon !Vuex 컨셉GettersMutationsActions" }, { "title": "(Vue.js) 라우터 - 지연된 로딩 (Component Lazy Loading)", "url": "/posts/vuejs-router-05-lazyloading/", "categories": "Vue.js", "tags": "vue.js, vue-router, nextTick", "date": "2020-09-11 11:00:00 +0900", "snippet": "SPA (Single Page Application) 의 큰 특징은 페이지 진입 시 리소스를 한번에 다운 받아 자연스러운 페이지 전환을 시켜 준다는 것 입니다. 하지만 프로젝트의 규모가 커질수록 리소스 다운로드에 많은 시간이 소요되어 이는 SPA 의 장점 이자 단점 으로 작용 합니다. SPA의 대표적인 프레임워크로 꼽히는 Angular, React, Vue 에서는 이와 같은 단점을 보완하기 위해 지연된 로딩 (Lazy Loading) 을 활용합니다.지연된 로딩 (Lazy Loading) 이란 해당 기능이 필요한 타이밍에 로딩 ..." }, { "title": "(Vue.js) Vue nextTick 으로 DOM 업데이트 콜백 처리하기", "url": "/posts/vuejs-next-tick/", "categories": "Vue.js", "tags": "vue.js, vue-router, nextTick", "date": "2020-09-09 11:00:00 +0900", "snippet": "Vue 는 DOM 업데이트를 비동기로 처리합니다.우리는 Vue 의 반응형 데이터를 변경하여 컴퍼넌트를 재 렌더링 하지만 이것은 즉각 발생 하는 이벤트가 아닙니다. 데이터 변경 발생 시 이를 대기열에 넣고 이벤트 루프 tick 을 통해 큐의 플러쉬가 일어날 때 DOM 업데이트가 일어나는 것 입니다. 자세한 내용은 공식문서 - 비동기 갱신 큐를 참고하시기 바랍니다. Vue 에서는 데이터 중심의 프로그래밍을 하는 것을 권장 하지만 개발을 하다 보면 의도치 않게 DOM을 직접 건드려야 하는 경우가 발생 합니다. 비동기로 처리되는 ..." }, { "title": "(Vue.js) 라우터 기초 (4) - 라우터 컴포넌트에서 props 속성 사용하기", "url": "/posts/vuejs-router-04/", "categories": "Vue.js", "tags": "vue.js, vue-router", "date": "2020-09-08 11:00:00 +0900", "snippet": "이전 포스팅: Vue.js 라우터 기초 (3) ✨ 라우터 컴포넌트에서 props 를 사용하기 위한 방법에 대해 알아보겠습니다 🙂 라우터 컴포넌트에 값을 전달하기 위한 방법으로 path params 을 사용하는 방법이 있습니다. /user/:userId 로 경로를 설정하면컴포넌트 내에서 $route.params.userId 로 매칭되어 접근이 가능하죠.VueRouter 에서 속성(props)에 대한 옵션을 지원합니다. Boolean, Object, Function 3가지 모드로 설정할 수 있습니다.Boolean 모드props ..." }, { "title": "(Vue.js) 라우터 기초 (3) - push, replace, go 사용법", "url": "/posts/vuejs-router-03/", "categories": "Vue.js", "tags": "vue.js, vue-router", "date": "2020-09-06 11:00:00 +0900", "snippet": "이전 포스팅: Vue.js 라우터 기초 (2) ✨ 이번 포스팅에서는 Vue 라우터를 이용한 페이지 이동 방법에 대해 알아보도록 하겠습니다 첫번째 포스팅에서 우리는 &amp;lt;router-link&amp;gt;를 통해 a 태그로 페이지 전환을 하였습니다. 이 방법 외에도 우리는 $router 객체를 통해 프로그래밍 방식페이지 전환 을 할 수 있습니다. 아래 표는 router 객체에서 제공하는 네비게이션 메소드 입니다. 메소드 설명 push URL 이동. 히스..." }, { "title": "(Vue.js) 라우터 기초 (2) - 동적 라우트 매칭", "url": "/posts/vuejs-router-02/", "categories": "Vue.js", "tags": "vue.js, vue-router", "date": "2020-09-03 11:00:00 +0900", "snippet": "이전 포스팅: Vue.js 라우터 기초 (1) Vue 라우터 두번째 포스팅 입니다 ☺️ 이번엔 Vue 라우터의 path parameter, URL을 파라미터로 받는 동적 라우트 매칭에 대해 알아보도록 하겠습니다.동적 라우트 매칭우리가 쇼핑몰 상품 페이지를 개발 한다고 생각 해봅시다. 상품을 보여줄때 우리는 중복된 페이지를 만들 필요 없이 상품 번호만 받아 api 를 호출해상품 정보를 렌더링하는 페이지를 개발할 수 있습니다.const routes = [ { path: &#39;/product/:productNo&#39;,..." }, { "title": "(Vue.js) 라우터 기초 (1)", "url": "/posts/vuejs-router-01/", "categories": "Vue.js", "tags": "vue.js, vue-router", "date": "2020-09-02 11:00:00 +0900", "snippet": "Vue 에서는 vue-router 라는 SPA 페이지 전환 공식 라우터를 제공 합니다. npm 을 통해 vue-router 를 설치하고, Vue root 인스턴스 생성 전 router 인스턴스를 생성 하면 라우터를 사용할 준비가 된 것 입니다. ✨vue-cli 를 사용할 경우 Vue.use(VueRouter) 로 라우터 사용을 명시해야합니다.vue-router 설치npm i vue-routerpackage.json 에 추가된 vue-router 디펜던시Vue 라우터 기초 예제라우팅 기능을 사용하기 위해 어플리케이션의 시작지..." }, { "title": "(Vue.js) 필터 (filter) 를 사용해 문자열 형식화 하기", "url": "/posts/vuejs-filter/", "categories": "Vue.js", "tags": "vue.js, filter", "date": "2020-09-01 11:00:00 +0900", "snippet": "Vue에서는 filter 를 사용해 문자열 형식화를 할 수 있습니다. 적용하는 방법은 두 가지입니다. 첫번째 방법으로는 vue 컴포넌트 옵션 사용하는 법이 있고, Vue 인스턴스를 생성하기 전에전역으로 설정하는 방법이 있습니다.컴포넌트 옵션 필터컴포넌트 옵션으로 필터를 정의하기 위해 아래처럼 filters 옵션을 추가 하고 입력한 숫자를 원단위 콤마를 찍는 필터를 만들어보겠습니다.&amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;input type=&quot;number&..." }, { "title": "(Vue.js) keep-alive, 동적 컴포넌트에 대하여", "url": "/posts/vuejs-keep-alive/", "categories": "Vue.js", "tags": "vue.js, keep-alive", "date": "2020-08-31 16:00:00 +0900", "snippet": "Vue 에서 동적으로 컴포넌트를 생성 하며 전환 효과를 주기 위해 &amp;lt;component v-bind:is=&quot;컴포넌트명&quot;&amp;gt; 을 사용할 수 있습니다.컴포넌트 전환과 라이프 사이클두 개의 컴포넌트 Home.vue 와 About.vue 를 만들어 App.vue 에서 두 컴포넌트의 전환 작업을 해보겠습니다. 두 컴포넌트는 모두 created 훅을 정의 하고 있습니다.// About.vue&amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;h1&a..." }, { "title": "(Vue.js) 믹스인 (Mixins) 를 활용한 재사용 가능한 기능을 구현해보자", "url": "/posts/vuejs-mixins/", "categories": "Vue.js", "tags": "vue.js, mixins", "date": "2020-08-31 11:00:00 +0900", "snippet": "Vue 에서 믹스인 (mixins) 이란 재사용이 필요한 요소들을 모아 놓은 객체를 의미 합니다. 믹스인으로 공통 관심사를 분리 하여 정의 하고 필요로하는 컴포넌트에서 가져다 쓰는 것 이지요. Mixin의 Hook 호출Vue 에서 Mixin 의 훅은 컴포넌트의 훅 이전에 호출 됩니다 아래 예제를 확인해 볼까요? // mixins/myMixin.jsexport const myMixin = { data() { return { name: &#39;myMixin&#39; } }, created() { ..." }, { "title": "(Vue.js) 슬롯 (Slots) 은 어떻게 활용할 수 있을까", "url": "/posts/vuejs-slots/", "categories": "Vue.js", "tags": "vue.js, slots", "date": "2020-08-29 17:00:00 +0900", "snippet": "Vue에서 슬롯은 (Slots)은 특정 컴포넌트에서 자신에게 등록된 자식 컴포넌트의 내용을 재정의 할 수 있는 디렉티브 입니다. Slot 의 의미를 나무위키에서 검색 하면 아래와 같이 나옵니다. 무언가를 집어넣도록 만든 통로 정도로 이해하면 되겠네요 :)Vue.js 2.6.0 버전 이전에는 slot 과 slot-scope속성으로 슬롯을 다뤘으나 이후 버전부터는 v-slot 디렉티브로 통합 문법을 사용합니다.이름이 있는 슬롯 (Named Slots)이름이 있는 슬롯은 전달하는 쪽(상위)에서 v-slot:${name} 으로, 받는..." }, { "title": "(Vue.js) Computed vs Methods 속성은 어떤 차이점을 가지고 있을까?", "url": "/posts/vuejs-computed-method/", "categories": "Vue.js", "tags": "vue.js", "date": "2020-08-28 05:00:00 +0900", "snippet": "Vue 에서 함수를 구현하기 위한 속성으로 computed 와 methods 를 제공 한다. 그렇다면 어떤경우에 Comptuted 를 사용해야하고 Methods 를 사용해야할까? 둘의 차이점은 뭘까? 속성 설명 computed 계산해야하는 목표 데이터를 정의 하는 ‘선언형’ 프로그래밍 방식. 저장된 결과(캐싱)를 반환하므로 종속 대상의 변경이 일어나기 전까지 호출 되지 않는다. methods 렌더링이 일어날 때마다 항상 함수를 ..." }, { "title": "(Vue.js) v-if 와 v-show 의 차이", "url": "/posts/vuejs-if-show/", "categories": "Vue.js", "tags": "vue.js, directive", "date": "2020-08-24 05:15:00 +0900", "snippet": "Vue.js는 화면 표출 조건을 설정할 수있는 v- 접두사 directive 를 지원한다.조건부 렌더링 directive 는 v-if와 v-show로 둘은 모두 Boolean type true || false 로 표출 여부를판단한다.v-if v-if : 단일 조건에서 사용 v-else : if 가 아닐 경우 else 표출 v-if, v-else-if, v-else : 다중 조건에서 사용&amp;lt;template&amp;gt; &amp;lt;div v-if=&quot;fruit === &#39;apple&#39;&..." }, { "title": "브라우저 렌더링 과정에 대하여", "url": "/posts/browser-render/", "categories": "Browser", "tags": "browser render", "date": "2020-08-22 20:00:00 +0900", "snippet": "브라우저의 구조브라우저는 우리가 요청한 자원을 서버에 요청하고 화면에 출력하는 기능을 한다. 브라우저의 주요 구성 요소는 다음과 같다. 사용자 인터페이스: 사용자에게 제공하는 브라우저 기본 기능 (주소표시줄, 이전/다음/새로고침 버튼 등) 브라우저 엔진 : 사용자 인터페이스와 렌더링 엔진 사이의 동작 제어 렌더링 엔진 : 요청한 콘텐츠 파싱, 출력 통신 : 네트워크 통신 UI 백엔드 : 브라우저의 기본장치를 그릴때 사용. 자바스크립트 해석기: 자바스크립트 코드 파싱 및 실행 자료 저장소: 쿠키와 같은 데이터 저..." }, { "title": "Javascript 이벤트 루프 (Event loop)", "url": "/posts/event-loop/", "categories": "Javascript", "tags": "Javascript 33 concepts, event loop", "date": "2020-08-20 20:00:00 +0900", "snippet": "Coming Soon -!" }, { "title": "Javascript 원시 타입 vs 참조 타입 (Primitive vs Reference)", "url": "/posts/primitive-type/", "categories": "Javascript", "tags": "Javascript 33 concepts, Primitive Type", "date": "2020-08-20 19:00:00 +0900", "snippet": "Javascript에서 제공하는 타입에는 원시 타입 (Primitive type)과 참조 타입 (Reference type)이 존재한다.원시 타입의 변수는 값 자체를 보관 한다. 값 자체는 변할 수 없는 불변의 성질을 가진다.Primitive Type 원시 타입 설명 Number 숫자 String 문자 Boolean true/false Undefined 값을 할당하..." }, { "title": "Javascript 호출 스택 (call stack)", "url": "/posts/callstack/", "categories": "Javascript", "tags": "Javascript 33 concepts", "date": "2020-08-18 19:00:00 +0900", "snippet": "Javascript 는 단일 쓰레드 (Single-Thread) 프로그래밍 언어로 단일 호출 스택(call stack)을 가진다.단일 스택을 가지고 있다는 것은 한번에 하나의 task 만 처리할 수 있다는 의미이다.콜 스택은 함수를 호출 하기 위한 정보를 담는 구조이다.스택이라는 이름에서도 알수 있듯이 콜 스택은 후입선출(LIFO, Last In First Out) 으로 동작한다.먼저 아래의 예제를 보자.function third() { console.log(&#39;hello 🙃&#39;) // throw new E..." } ]
